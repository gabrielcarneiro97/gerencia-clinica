scalar Date

interface DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
}

type Paciente implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  cpf: String
  nome: String!
  filiacao1: String
  filiacao2: String
  sexo: String
  nascimento: Date
  enderecoId: Int
  grupo1Id: Int
  grupo2Id: Int
  contatoId: Int
  fichaMedicaId: Int
}

type PacienteGrupo implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  descricao: String
  tipo: Int
}

type Endereco implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  logradouro: String
  numero: String
  complemento: String
  bairro: String
  cidade: String
  estado: String
  pais: String
  cep: String
}

type Contato implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  email: String
  telefone1: String
  telefone2: String
}

type FichaMedica implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  tipoSangue: String
  altura: Int
}

type FichaMedicaDetalhe implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  fichaMedicaId: Int
  descricao: String
  tipo: Int
}

type Consulta implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  data: Date
  responsavel: String
  observacoes: String
  status: Int
  pacienteId: Int
}

type ConsultaProcedimento implements DbBasic {
  id: Int!
  createdAt: Date
  updatedAt: Date
  consultaId: Int
  descricao: String
}

input ConsultaInput {
  id: Int
  createdAt: Date
  updatedAt: Date
  status: Int
  data: Date
  responsavel: String
  observacoes: String
  pacienteId: Int
}

input ConsultaProcedimentoInput {
  id: Int
  createdAt: Date
  updatedAt: Date
  consultaId: Int
  descricao: String
}

input PacienteInput {
  id: Int
  createdAt: Date
  updatedAt: Date
  cpf: String
  nome: String
  filiacao1: String
  filiacao2: String
  sexo: String
  nascimento: Date
  enderecoId: Int
  grupo1Id: Int
  grupo2Id: Int
  contatoId: Int
  fichaMedicaId: Int
}

input EnderecoInput {
  id: Int
  createdAt: Date
  updatedAt: Date
  logradouro: String
  numero: String
  complemento: String
  bairro: String
  cidade: String
  estado: String
  pais: String
  cep: String
}

input ContatoInput {
  id: Int
  createdAt: Date
  updatedAt: Date
  email: String
  telefone1: String
  telefone2: String
}

type Query {
  pacientes (nome: String): [Paciente!]!
  paciente (id: Int!): Paciente!

  consultas(
    data: String
    pacienteId: Int
  ): [Consulta]

  consulta(id: Int!): Consulta!

  consultaProcedimentos(consultaId: Int): [ConsultaProcedimento!]!

  endereco(id: Int!): Endereco!

  contato(id: Int!): Contato!

  pacienteGrupos: [PacienteGrupo!]!
}

type Mutation {
  saveConsulta(consulta: ConsultaInput): Consulta!
  deleteConsulta(id: Int): Consulta!

  saveConsultaProcedimento(consultaProcedimento: ConsultaProcedimentoInput): ConsultaProcedimento!
  deleteConsultaProcedimento(id: Int): ConsultaProcedimento!

  savePaciente(paciente: PacienteInput): Paciente!

  saveEndereco(endereco: EnderecoInput): Endereco!

  saveContato(contato: ContatoInput): Contato!
}
